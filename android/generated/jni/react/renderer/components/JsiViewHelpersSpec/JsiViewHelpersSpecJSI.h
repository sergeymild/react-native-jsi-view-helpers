/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeJsiViewHelpersCxxSpecJSI : public TurboModule {
protected:
  NativeJsiViewHelpersCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object measureText(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Object measureView(jsi::Runtime &rt, double viewId) = 0;
  virtual jsi::Object measureViewByNativeId(jsi::Runtime &rt, jsi::String nativeID) = 0;
  virtual void scrollToChild(jsi::Runtime &rt, jsi::Object params) = 0;

};

template <typename T>
class JSI_EXPORT NativeJsiViewHelpersCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "JsiViewHelpers";

protected:
  NativeJsiViewHelpersCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeJsiViewHelpersCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeJsiViewHelpersCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeJsiViewHelpersCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Object measureText(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::measureText) == 2,
          "Expected measureText(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::measureText, jsInvoker_, instance_, std::move(params));
    }
    jsi::Object measureView(jsi::Runtime &rt, double viewId) override {
      static_assert(
          bridging::getParameterCount(&T::measureView) == 2,
          "Expected measureView(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::measureView, jsInvoker_, instance_, std::move(viewId));
    }
    jsi::Object measureViewByNativeId(jsi::Runtime &rt, jsi::String nativeID) override {
      static_assert(
          bridging::getParameterCount(&T::measureViewByNativeId) == 2,
          "Expected measureViewByNativeId(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::measureViewByNativeId, jsInvoker_, instance_, std::move(nativeID));
    }
    void scrollToChild(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::scrollToChild) == 2,
          "Expected scrollToChild(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::scrollToChild, jsInvoker_, instance_, std::move(params));
    }

  private:
    friend class NativeJsiViewHelpersCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
