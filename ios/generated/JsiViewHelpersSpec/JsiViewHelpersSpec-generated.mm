/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "JsiViewHelpersSpec.h"


@implementation NativeJsiViewHelpersSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeJsiViewHelpers_SpecMeasureTextParams)
+ (RCTManagedPointer *)JS_NativeJsiViewHelpers_SpecMeasureTextParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeJsiViewHelpers::SpecMeasureTextParams>(json);
}
@end
@implementation RCTCxxConvert (NativeJsiViewHelpers_SpecScrollToChildParams)
+ (RCTManagedPointer *)JS_NativeJsiViewHelpers_SpecScrollToChildParams:(id)json
{
  return facebook::react::managedPointer<JS::NativeJsiViewHelpers::SpecScrollToChildParams>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeJsiViewHelpersSpecJSI_measureText(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "measureText", @selector(measureText:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeJsiViewHelpersSpecJSI_measureView(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "measureView", @selector(measureView:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeJsiViewHelpersSpecJSI_measureViewByNativeId(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "measureViewByNativeId", @selector(measureViewByNativeId:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeJsiViewHelpersSpecJSI_scrollToChild(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "scrollToChild", @selector(scrollToChild:), args, count);
    }

  NativeJsiViewHelpersSpecJSI::NativeJsiViewHelpersSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["measureText"] = MethodMetadata {1, __hostFunction_NativeJsiViewHelpersSpecJSI_measureText};
        setMethodArgConversionSelector(@"measureText", 0, @"JS_NativeJsiViewHelpers_SpecMeasureTextParams:");
        
        methodMap_["measureView"] = MethodMetadata {1, __hostFunction_NativeJsiViewHelpersSpecJSI_measureView};
        
        
        methodMap_["measureViewByNativeId"] = MethodMetadata {1, __hostFunction_NativeJsiViewHelpersSpecJSI_measureViewByNativeId};
        
        
        methodMap_["scrollToChild"] = MethodMetadata {1, __hostFunction_NativeJsiViewHelpersSpecJSI_scrollToChild};
        setMethodArgConversionSelector(@"scrollToChild", 0, @"JS_NativeJsiViewHelpers_SpecScrollToChildParams:");
  }
} // namespace facebook::react
