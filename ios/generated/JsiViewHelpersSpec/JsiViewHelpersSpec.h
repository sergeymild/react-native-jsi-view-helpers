/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of JsiViewHelpersSpec symbols
#ifndef JsiViewHelpersSpec_H
#define JsiViewHelpersSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeJsiViewHelpers {
    struct SpecMeasureTextParams {
      NSString *text() const;
      double fontSize() const;
      double maxWidth() const;
      std::optional<bool> allowFontScaling() const;
      std::optional<bool> usePreciseWidth() const;
      NSString *fontFamily() const;
      NSString *weight() const;

      SpecMeasureTextParams(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeJsiViewHelpers_SpecMeasureTextParams)
+ (RCTManagedPointer *)JS_NativeJsiViewHelpers_SpecMeasureTextParams:(id)json;
@end
namespace JS {
  namespace NativeJsiViewHelpers {
    struct SpecScrollToChildParams {
      NSString *scrollNativeID() const;
      std::optional<double> scrollViewId() const;
      NSString *childNativeID() const;
      double offset() const;
      bool scrollToEnd() const;

      SpecScrollToChildParams(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeJsiViewHelpers_SpecScrollToChildParams)
+ (RCTManagedPointer *)JS_NativeJsiViewHelpers_SpecScrollToChildParams:(id)json;
@end
@protocol NativeJsiViewHelpersSpec <RCTBridgeModule, RCTTurboModule>

- (NSDictionary *)measureText:(JS::NativeJsiViewHelpers::SpecMeasureTextParams &)params;
- (NSDictionary *)measureView:(double)viewId;
- (NSDictionary *)measureViewByNativeId:(NSString *)nativeID;
- (void)scrollToChild:(JS::NativeJsiViewHelpers::SpecScrollToChildParams &)params;

@end

@interface NativeJsiViewHelpersSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeJsiViewHelpers'
   */
  class JSI_EXPORT NativeJsiViewHelpersSpecJSI : public ObjCTurboModule {
  public:
    NativeJsiViewHelpersSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeJsiViewHelpers::SpecMeasureTextParams::text() const
{
  id const p = _v[@"text"];
  return RCTBridgingToString(p);
}
inline double JS::NativeJsiViewHelpers::SpecMeasureTextParams::fontSize() const
{
  id const p = _v[@"fontSize"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeJsiViewHelpers::SpecMeasureTextParams::maxWidth() const
{
  id const p = _v[@"maxWidth"];
  return RCTBridgingToDouble(p);
}
inline std::optional<bool> JS::NativeJsiViewHelpers::SpecMeasureTextParams::allowFontScaling() const
{
  id const p = _v[@"allowFontScaling"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeJsiViewHelpers::SpecMeasureTextParams::usePreciseWidth() const
{
  id const p = _v[@"usePreciseWidth"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeJsiViewHelpers::SpecMeasureTextParams::fontFamily() const
{
  id const p = _v[@"fontFamily"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeJsiViewHelpers::SpecMeasureTextParams::weight() const
{
  id const p = _v[@"weight"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeJsiViewHelpers::SpecScrollToChildParams::scrollNativeID() const
{
  id const p = _v[@"scrollNativeID"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeJsiViewHelpers::SpecScrollToChildParams::scrollViewId() const
{
  id const p = _v[@"scrollViewId"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeJsiViewHelpers::SpecScrollToChildParams::childNativeID() const
{
  id const p = _v[@"childNativeID"];
  return RCTBridgingToString(p);
}
inline double JS::NativeJsiViewHelpers::SpecScrollToChildParams::offset() const
{
  id const p = _v[@"offset"];
  return RCTBridgingToDouble(p);
}
inline bool JS::NativeJsiViewHelpers::SpecScrollToChildParams::scrollToEnd() const
{
  id const p = _v[@"scrollToEnd"];
  return RCTBridgingToBool(p);
}
#endif // JsiViewHelpersSpec_H
